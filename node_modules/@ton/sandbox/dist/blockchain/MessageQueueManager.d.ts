import { Address, Cell, Message } from '@ton/core';
import { BlockchainTransaction, SendMessageResult } from './Blockchain';
import { AsyncLock } from '../utils/AsyncLock';
import { TickOrTock } from '../executor/Executor';
import { MessageParams, SmartContract } from './SmartContract';
export declare class MessageQueueManager {
    private readonly lock;
    private readonly blockchain;
    private messageQueue;
    constructor(lock: AsyncLock, blockchain: {
        startFetchingContract(address: Address): Promise<SmartContract>;
        getContract(address: Address): Promise<SmartContract>;
        increaseLt(): void;
        getLibs(): Cell | undefined;
        setLibs(libs: Cell | undefined): void;
        getAutoDeployLibs(): boolean;
        registerTxsForCoverage(txs: BlockchainTransaction[]): void;
        addTransaction(transaction: BlockchainTransaction): void;
    });
    pushMessage(message: Message | Cell): Promise<void>;
    pushTickTock(on: Address, which: TickOrTock): Promise<void>;
    runQueue(params?: MessageParams): Promise<SendMessageResult>;
    runQueueIter(needsLocking: boolean, params?: MessageParams): AsyncIterator<BlockchainTransaction> & AsyncIterable<BlockchainTransaction>;
    protected processTx(needsLocking: boolean, params?: MessageParams): Promise<IteratorResult<BlockchainTransaction>>;
    protected processQueue(params?: MessageParams): Promise<BlockchainTransaction[]>;
    protected processMessage(params?: MessageParams): Promise<IteratorResult<BlockchainTransaction>>;
    private applyLibraryActions;
}

import { Cell } from '@ton/core';
import { LogsVerbosity, SmartContractSnapshot } from './SmartContract';
import { BlockId, PrevBlocksInfo } from '../executor/Executor';
import { BlockchainTransaction } from './Blockchain';
export type BlockchainSnapshot = {
    contracts: SmartContractSnapshot[];
    networkConfig: string;
    lt: bigint;
    time?: number;
    verbosity: LogsVerbosity;
    libs?: Cell;
    nextCreateWalletIndex: number;
    prevBlocksInfo?: PrevBlocksInfo;
    randomSeed?: Buffer;
    autoDeployLibs: boolean;
    transactions: BlockchainTransaction[];
};
export type SerializableBlockId = {
    workchain: number;
    shard: string;
    seqno: number;
    rootHash: string;
    fileHash: string;
};
export declare function blockIdToSerializable(blockId: BlockId): SerializableBlockId;
export type SerializableSnapshot = {
    contracts: {
        address: string;
        account: string;
        lastTxTime: number;
        verbosity?: Partial<LogsVerbosity>;
    }[];
    networkConfig: string;
    lt: string;
    time?: number;
    verbosity: LogsVerbosity;
    libs?: string;
    nextCreateWalletIndex: number;
    prevBlocksInfo?: {
        lastMcBlocks: SerializableBlockId[];
        prevKeyBlock: SerializableBlockId;
        lastMcBlocks100?: SerializableBlockId[];
    };
    randomSeed?: string;
    autoDeployLibs: boolean;
    transactions: {
        transaction: string;
        blockchainLogs: string;
        vmLogs: string;
        debugLogs: string;
        oldStorage?: string;
        newStorage?: string;
        outActions?: string;
        externals: string[];
        mode?: number;
        parentHash?: string;
        childrenHashes: string[];
    }[];
};
export declare function snapshotToSerializable(snapshot: BlockchainSnapshot): SerializableSnapshot;
export declare function snapshotFromSerializable(serialized: SerializableSnapshot): BlockchainSnapshot;

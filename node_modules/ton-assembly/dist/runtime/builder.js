"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeBuilder = void 0;
const core_1 = require("@ton/core");
/**
 * Extended Builder class that stores additional debug information.
 */
class CodeBuilder extends core_1.Builder {
    instructions = [];
    subMappings = [];
    dictionaryInfo = [];
    debugSectionId = -1;
    storeInstructionPrefix(value, bits, instr) {
        this.instructions.push({ instr, offset: this.bits, debugSection: this.debugSectionId });
        return super.storeUint(value, bits);
    }
    build() {
        const cell = this.asCell();
        return [
            cell,
            {
                cell: cell.hash().toString("hex"),
                instructions: this.instructions,
                subMappings: this.subMappings,
                dictionaryInfo: this.dictionaryInfo,
            },
        ];
    }
    startDebugSection(id) {
        this.debugSectionId = id;
        return this;
    }
    pushMappings(...mappings) {
        this.subMappings.push(...mappings);
        return this;
    }
    pushInstructions(...instructions) {
        this.instructions.push(...instructions);
        return this;
    }
    getDictionaryInfo() {
        return this.dictionaryInfo;
    }
    pushDictionaryInfo(...info) {
        this.dictionaryInfo.push(...info);
        return this;
    }
    storeRefWithMapping([cell, mapping]) {
        this.subMappings.push(mapping);
        return super.storeRef(cell);
    }
    storeDictionaryDirect(dict) {
        dict.storeDirect(this);
        return this;
    }
    reinitFrom(other) {
        // @ts-expect-error hack
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        this._bits = other._bits;
        // @ts-expect-error hack
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        this._refs = other._refs;
        this.instructions.push(...other.instructions);
        this.subMappings.push(...other.subMappings);
        this.dictionaryInfo.push(...other.dictionaryInfo);
        this.debugSectionId = other.debugSectionId;
        return this;
    }
}
exports.CodeBuilder = CodeBuilder;
//# sourceMappingURL=builder.js.map
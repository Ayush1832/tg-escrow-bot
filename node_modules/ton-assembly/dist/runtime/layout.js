"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchingRule = void 0;
const c = __importStar(require("./constructors"));
const t = __importStar(require("./types"));
const matchRefRule = (rule, instructions) => {
    const [first, second] = instructions;
    const match = first?.$ === "PUSHCONT" && second?.$ === rule.instrName;
    if (!match)
        return undefined;
    return { body: first.arg0 };
};
const rules = [
    {
        instrName: "IF",
        ctor: c.IFREF,
        type: t.IFREF,
    },
    {
        instrName: "IFNOT",
        ctor: c.IFNOTREF,
        type: t.IFNOTREF,
    },
    {
        instrName: "IFJMP",
        ctor: c.IFJMPREF,
        type: t.IFJMPREF,
    },
    {
        instrName: "IFNOTJMP",
        ctor: c.IFNOTJMPREF,
        type: t.IFNOTJMPREF,
    },
    {
        instrName: "IFELSE",
        ctor: c.IFELSEREF,
        type: t.IFELSEREF,
    },
];
const matchingRule = (instructions) => {
    for (const rule of rules) {
        const match = matchRefRule(rule, instructions);
        if (match) {
            return {
                body: match.body,
                rule,
            };
        }
    }
    return undefined;
};
exports.matchingRule = matchingRule;
//# sourceMappingURL=layout.js.map